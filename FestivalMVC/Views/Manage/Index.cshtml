@model FestivalMVC.Models.ContactForSelf
@{
    ViewBag.Title = "Your Account";
}

<h2>@ViewBag.Title.</h2>

<div>
    <h4>View or change your account settings</h4>
    <hr />
    <div class="well">
        <div class="row">
            <div class="col-sm-6">
                <dl class="dl-horizontal">
                    <dt>Name:</dt>
                    <dd>@(Model.FirstName + " " + Model.LastName) </dd>
                </dl>
                <dl class="dl-horizontal">
                    <dt>Phone:</dt>
                    <dd>@Model.Phone</dd>
                </dl>
                <dl class="dl-horizontal">
                    <dt>Email:</dt>
                    <dd>@Model.Email</dd>
                </dl>
            </div>
            <div class="col-sm-2">
                <a class="btn btn-primary btn-block" onclick="showModal();">Change Contact Info</a>
                <br />
                <a class="btn btn-warning btn-block" href="@Url.Action("ChangePassword")">Change Password</a>
                <br />
            </div>
            <div class="col-sm-4">
                <p class="text-success">@ViewBag.StatusMessage</p>
            </div>
        </div>
    </div>
    <div id="modal" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                @using (Html.BeginForm("UpdateContactInfo", "Manage", FormMethod.Post, new { enctype = "multipart/form-data", id = "contact" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-header">Change Contact Info</div>
                    <div class="modal-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                        </div>                        <div class="form-group">
                            @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Phone, new { @class = "control-label" })
                            @Html.TextBoxFor(model => model.Phone, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="submit" class="submit btn btn-default" value="Submit" />
                        <button class="btn btn-default" data-dismiss="modal">Cancel</button>
                    </div>
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.FirstName)
                    @Html.HiddenFor(model => model.LastName)

                }
            </div>
        </div>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/Scripts/jquery.validate.min.js")
    <script>
        function showModal() {
            $('#modal').modal();
        }

        $(document).ready(function () {

            $('#contact').validate({ // initialize the plugin
                rules: {
                    FirstName: {
                        required: true,
                        minlength: 1,
                        maxlength: 50
                    },
                    LastName: {
                        required: true,
                        minlength: 1,
                        maxlength: 50
                    },
                    Email: {
                        required: true,
                        email: true,
                        maxlength: 50
                    },
                    Phone: {
                        required: true,
                        minlength: 5,
                        maxlength: 50
                    }
                }
            });

        });
    </script>
}